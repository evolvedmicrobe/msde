% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sde.post.R
\name{sde.post}
\alias{sde.post}
\title{Posterior Inference}
\usage{
sde.post(model, init, init.data, init.params, par.index, dt, nsamples, burn,
  data.out.ind, prior, rw.jump.sd = NULL, update.data = TRUE,
  update.params = TRUE, update.multi = TRUE, smp.old,
  max.multi.tries = 5000, log.multi.acc = FALSE, loglik.out = FALSE,
  last.miss.out = FALSE, verbose = TRUE, debug = FALSE)
}
\arguments{
\item{model}{an object of the sde.model class generated using \code{sde.make.model}}

\item{init}{A list containing values for any combination of \code{init.data}, \code{init.params}, \code{par.index} and \code{dt}.
Values provided in this list will be used instead of values provided as parameters to \code{sde.post}}

\item{init.data}{Data for the model}

\item{init.params}{Parameters for the model}

\item{dt}{Delta-t for the model}

\item{nsamples}{An integer giving the number of samples to generate with the Markov chain after the required
number of samples have been burned}

\item{burn}{An integer giving the number of samples to burn before beginning to store samples}

\item{prior}{A list containing the parameters for the model's prior function. \cr
The parameters must have the correct names for the prior indicated by \code{prior.type} \cr
normal: Mu, V \cr
gcop: dens.x, dx, rx, dens.y, ldens.y, Dens.y, Rho, mean, sd \cr
flat: flat prior does not accept parameters. Parameter list is ignored \cr
custom: no argument checking for custom priors}

\item{rw.jump.sd}{A numeric vector containing random walk sd's (default \code{NULL})}

\item{update.data}{A boolean (default \code{TRUE})}

\item{update.params}{A boolean (default \code{TRUE})}

\item{update.multi}{A boolean (default \code{TRUE})}

\item{smp.old}{the result of a previous call to \code{sde.post}. Used for multi update}

\item{max.multi.tries}{An integer (default \code{5e3})}

\item{log.multi.acc}{A boolean. If \code{TRUE} and \code{update.multi == TRUE} log.multi.acc will be included in the output of this function (default \code{FALSE})}

\item{loglik.out}{A boolean. If \code{TRUE} loglik will be included in the output of this function (default \code{FALSE})}

\item{last.miss.out}{A boolean. If \code{TRUE} last.miss will be included in the output of this function (default \code{FALSE})}

\item{verbose}{A boolean that determines the amount of text printed out by \code{sde.post}. (default \code{TRUE})}

\item{debug}{a boolean (\code{FALSE} by default) if set to \code{TRUE}, will cause the function to open a browser mid-call}

\item{prior.type}{A string denoting which prior should be used for Posterior Inference (\code{"default"} by default).\cr
Must be one of: default, flat, normal, gcop or custom\cr
if \code{"flat"} a flat prior will be used\cr
if \code{"normal"} a normal prior will be used\cr
if \code{"gcop"} a Gaussian Copula prior will be used\cr
if \code{"default"} the names of the parameters provided in \code{prior} will be used to determine
    whether a normal or gcop prior should be used.
    If the parameter list does not match either of these, a flat prior will be used\cr
if \code{"custom"} the custom prior that was passed to \code{sde.make.model} when \code{model} was created
    will be used}
}
\value{
a list containing:\cr \cr
                         params, \cr
                         data, \cr
                         loglik (only if \code{loglik.out == TRUE}), \cr
                         dt, \cr
                         par.index, \cr
                         data.out.ind, \cr
                         init.data, \cr
                         init.params, \cr
                         rw.jump.sd, \cr
                         prior, \cr
                         prior.type, \cr
                         last.iter, \cr
                         last.miss (only if \code{last.miss.out == TRUE})\cr
                         multi.ind (only if \code{update.multi == TRUE})\cr
                         log.multi.acc (only if \code{update.multi == TRUE && log.multi.acc == TRUE})\cr
                         accept\cr
                         time
}
\description{
Markov Chain Monte Carlo sampling of posterior distribution
}
\examples{
# Create the model
hest.model <- sde.make.model(list = hestList, model.name = "hest")

theta <- c(alpha = .1, gamma = 5, beta = .8, sigma = .6, rho = -.7)
Y0 <- c(X = log(100), Z = .1)

# simulate data
N <- 10
burn <- 10
dT <- 1/252

hsim <- sde.sim(model = hest.model, init.data = Y0, params = theta, dt = dT, dt.sim = dT/100,
               N = N, burn = burn, nreps = 1)

# posterior inference

# parameters of normal prior
norm.prior <- c(theta, Y0[2])
norm.prior <- list(Mu = norm.prior,
                  V = diag(abs(norm.prior)/2) \%*\% f(length(norm.prior)) \%*\% diag(abs(norm.prior)/2))

k <- 1
par.index <- 1
init <- sde.init(data = hsim$data, dt = dT, k = k, par.index = par.index, params = theta)

# reduce the prior on N random variables to n <= N
n <- length(theta) + hest.model$ndim - init$par.index[1]
norm.prior$Mu <- norm.prior$Mu[1:n]
norm.prior$V <- norm.prior$V[1:n,1:n]

nsamples <- 10
burn <- 2
rw.jump.sd <- rep(.1, 6)

hpost <- sde.post(model = hest.model, init = init, nsamples = nsamples, burn = burn,
                 data.out.ind = nsamples, rw.jump.sd = rw.jump.sd,
                 prior = norm.prior)


# and a different model
gl05.model <- sde.make.model(list = gl05List, model.name = "gl05")

theta <- log(c(.1,.7, .35, .2, .1, .9, .3, .1))
names(theta) <- paste("c", 1:8, sep = "")

Y0 <- c(R = 5, P = 5, Q = 5, D = 5)

# simulation
N <- 10
burn <- 10
dT <- 1

gsim <- sde.sim(model = gl05.model, init.data = Y0, params = theta, dt = dT, dt.sim = dT/1e5,
               N = N, burn = burn, nreps = 1)


# inference

# prior
norm.prior <- c(theta, Y0[-1])
norm.prior <- list(Mu = norm.prior,
                  V = diag(abs(norm.prior)/2) \%*\% f(length(norm.prior)) \%*\% diag(abs(norm.prior)/2))
psim <- rmvnorm(1e5, mean = norm.prior$Mu*1.1, sigma = norm.prior$V*2)
gcop.prior <- cop.par(X = psim, n = 512)

k <- 2 # or 1, 2, 3, ...
par.index <- sample(1:gl05.model$ndims, N, replace = TRUE) # 1,2,3, or 4, but not 0
init <- sde.init(data = gsim$data, dt = dT, k = k, par.index = par.index, params = theta)

n <- length(theta) + gl05.model$ndim - init$par.index[1]
gcop.prior$dens.x <- gcop.prior$dens.x[1:n]
gcop.prior$dens.y <- gcop.prior$dens.y[1:n]
gcop.prior$Dens.y <- gcop.prior$Dens.y[1:n]
gcop.prior$dx <- gcop.prior$dx[1:n]
gcop.prior$ldens.y <- gcop.prior$ldens.y[1:n]
gcop.prior$mean <- gcop.prior$mean[1:n]
gcop.prior$Rho <- gcop.prior$Rho[1:n,1:n]
gcop.prior$rx <- gcop.prior$rx[1:(2*n)]
gcop.prior$sd <- gcop.prior$sd[1:n]

nsamples <- 10
burn <- 2
rw.jump.sd <- rep(.1, gl05.model$ndims+gl05.model$nparams-1)

gpost <- sde.post(model = gl05.model, init = init, nsamples = nsamples, burn = burn,
                 data.out.ind = nsamples, rw.jump.sd = rw.jump.sd,
                 prior = gcop.prior)
}

